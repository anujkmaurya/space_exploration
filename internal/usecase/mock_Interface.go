// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/anuj_personal/go/src/github.com/personal-work/space_exploration/internal/usecase/Interface.go

// Package usecase is a generated GoMock package.
package usecase

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/personal-work/space_exploration/internal/models"
	http "net/http"
	reflect "reflect"
)

// MockUsecaseInterface is a mock of UsecaseInterface interface
type MockUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseInterfaceMockRecorder
}

// MockUsecaseInterfaceMockRecorder is the mock recorder for MockUsecaseInterface
type MockUsecaseInterfaceMockRecorder struct {
	mock *MockUsecaseInterface
}

// NewMockUsecaseInterface creates a new mock instance
func NewMockUsecaseInterface(ctrl *gomock.Controller) *MockUsecaseInterface {
	mock := &MockUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecaseInterface) EXPECT() *MockUsecaseInterfaceMockRecorder {
	return m.recorder
}

// CreateDrone mocks base method
func (m *MockUsecaseInterface) CreateDrone(w http.ResponseWriter, r *http.Request) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDrone", w, r)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDrone indicates an expected call of CreateDrone
func (mr *MockUsecaseInterfaceMockRecorder) CreateDrone(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDrone", reflect.TypeOf((*MockUsecaseInterface)(nil).CreateDrone), w, r)
}

// GetAllDrones mocks base method
func (m *MockUsecaseInterface) GetAllDrones(w http.ResponseWriter, r *http.Request) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDrones", w, r)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDrones indicates an expected call of GetAllDrones
func (mr *MockUsecaseInterfaceMockRecorder) GetAllDrones(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDrones", reflect.TypeOf((*MockUsecaseInterface)(nil).GetAllDrones), w, r)
}

// CreateSector mocks base method
func (m *MockUsecaseInterface) CreateSector(w http.ResponseWriter, r *http.Request) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSector", w, r)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSector indicates an expected call of CreateSector
func (mr *MockUsecaseInterfaceMockRecorder) CreateSector(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSector", reflect.TypeOf((*MockUsecaseInterface)(nil).CreateSector), w, r)
}

// GetAllSectors mocks base method
func (m *MockUsecaseInterface) GetAllSectors(w http.ResponseWriter, r *http.Request) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSectors", w, r)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSectors indicates an expected call of GetAllSectors
func (mr *MockUsecaseInterfaceMockRecorder) GetAllSectors(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSectors", reflect.TypeOf((*MockUsecaseInterface)(nil).GetAllSectors), w, r)
}

// CreateDNS mocks base method
func (m *MockUsecaseInterface) CreateDNS(w http.ResponseWriter, r *http.Request) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDNS", w, r)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDNS indicates an expected call of CreateDNS
func (mr *MockUsecaseInterfaceMockRecorder) CreateDNS(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDNS", reflect.TypeOf((*MockUsecaseInterface)(nil).CreateDNS), w, r)
}

// GetAllDNS mocks base method
func (m *MockUsecaseInterface) GetAllDNS(w http.ResponseWriter, r *http.Request) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDNS", w, r)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDNS indicates an expected call of GetAllDNS
func (mr *MockUsecaseInterfaceMockRecorder) GetAllDNS(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDNS", reflect.TypeOf((*MockUsecaseInterface)(nil).GetAllDNS), w, r)
}

// GetDroneLocation mocks base method
func (m *MockUsecaseInterface) GetDroneLocation(droneLocReq *models.LocationReq) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDroneLocation", droneLocReq)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDroneLocation indicates an expected call of GetDroneLocation
func (mr *MockUsecaseInterfaceMockRecorder) GetDroneLocation(droneLocReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDroneLocation", reflect.TypeOf((*MockUsecaseInterface)(nil).GetDroneLocation), droneLocReq)
}
